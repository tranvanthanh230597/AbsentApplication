package com.example.demo.Controller;import com.example.demo.Model.ClassJoin;import com.example.demo.Model.Role;import com.example.demo.Model.User;import com.example.demo.Service.ClassJoinService;import com.example.demo.Service.RoleService;import com.example.demo.Service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.Date;@RequestMapping("/admin")@Controllerpublic class UserController extends AdminBaseController {    private final  String TERM = "Users ";    @Autowired    RoleService roleService;    @Autowired    UserService userService;    @Autowired    ClassJoinService classJoinService;    @RequestMapping(value = "/users", method = RequestMethod.GET)    public ModelAndView ShowUser(){        ModelAndView modelAndView =new ModelAndView("/User/list");        modelAndView.addObject("title",TITLE_ADD);        modelAndView.addObject("term",TERM);        modelAndView.addObject("userInfo",new User());        return modelAndView;    }    @RequestMapping(value = "/users",method = RequestMethod.POST)    public ModelAndView CreateUser(@ModelAttribute("userInfo") User user){        Iterable<User> users = userService.findAll();        Iterable<ClassJoin> classJoins = classJoinService.findAll();        Iterable<Role> roles = roleService.findAll();        Role role = new Role();        role.setId((long) 1);        user.setDayOff(0);        user.setUserStatus("ON");        user.setRole(role);        userService.save(user);        ModelAndView modelAndView =new ModelAndView("/User/list");        modelAndView.addObject("userList",users);        modelAndView.addObject("classList",classJoins);        modelAndView.addObject("roleList",roles);        modelAndView.addObject("userInfo",new User());        modelAndView.addObject("message", "New Role created successfully");        return modelAndView;    }    @RequestMapping(value = "/editUser/{id}", method = RequestMethod.GET)    public ModelAndView showEditUserForm(@PathVariable Long id){        User user = userService.findById(id);        if (user != null){            ModelAndView modelAndView = new ModelAndView("User/edit");            modelAndView.addObject("userInfo",user);            return modelAndView;        }        else {            Iterable<User> users = userService.findAll();            Iterable<ClassJoin> classJoins = classJoinService.findAll();            Iterable<Role> roles = roleService.findAll();            ModelAndView modelAndView =new ModelAndView("/User/list");            modelAndView.addObject("userList",users);            modelAndView.addObject("classList",classJoins);            modelAndView.addObject("roleList",roles);            modelAndView.addObject("userInfo",new User());            modelAndView.addObject("message", "Can not find user with id: " + id);            return modelAndView;        }    }    @RequestMapping(value = "/editUser", method = RequestMethod.POST)    public ModelAndView updateRole(@ModelAttribute("userInfo")User user){        userService.save(user);        ModelAndView modelAndView =new ModelAndView("/User/edit");        modelAndView.addObject("userInfo",user);        modelAndView.addObject("message", "Update success");        return modelAndView;    }}