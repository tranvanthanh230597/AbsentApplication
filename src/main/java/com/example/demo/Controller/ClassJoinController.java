package com.example.demo.Controller;import com.example.demo.Model.ClassJoin;import com.example.demo.Model.Role;import com.example.demo.Service.ClassJoinService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import java.util.Iterator;@Controllerpublic class ClassJoinController {    @Autowired    ClassJoinService classJoinService;    @RequestMapping(value = "/class", method = RequestMethod.GET)    public ModelAndView listClass(){        Iterable<ClassJoin> classList = classJoinService.findAll();        ModelAndView modelAndView =new ModelAndView("/ClassJoin/list");        modelAndView.addObject("classList",classList);        modelAndView.addObject("classInfo",new ClassJoin());        return modelAndView;    }    @RequestMapping(value = "/class",method = RequestMethod.POST)    public ModelAndView CreateClass(@ModelAttribute("classJoin") ClassJoin classJoin){        classJoinService.save(classJoin);        Iterable<ClassJoin> classJoins = classJoinService.findAll();        ModelAndView modelAndView =new ModelAndView("/ClassJoin/list");        modelAndView.addObject("classList",classJoins);        modelAndView.addObject("classInfo",new ClassJoin());        modelAndView.addObject("message", "New Class created successfully");        return modelAndView;    }    @RequestMapping(value = "/editCla/{id}", method = RequestMethod.GET)    public ModelAndView showEditClassForm(@PathVariable Long id){        ClassJoin classJoin = classJoinService.findById(id);        if (classJoin != null){            ModelAndView modelAndView = new ModelAndView("ClassJoin/edit");            modelAndView.addObject("classInfo",classJoin);            return modelAndView;        }        else {            Iterable<ClassJoin> classList = classJoinService.findAll();            ModelAndView modelAndView =new ModelAndView("/ClassJoin/list");            modelAndView.addObject("classList",classList);            modelAndView.addObject("classInfo",new ClassJoin());            modelAndView.addObject("message", "Can not find class with id: " + id);            return modelAndView;        }    }    @RequestMapping(value = "/editCla", method = RequestMethod.POST)    public ModelAndView updateClass(@ModelAttribute("classInfo")ClassJoin classJoin){        classJoinService.save(classJoin);        ModelAndView modelAndView =new ModelAndView("/ClassJoin/edit");        modelAndView.addObject("classInfo",classJoin);        modelAndView.addObject("message", "Update success");        return modelAndView;    }    @RequestMapping(value = "/delCla/{id}", method = RequestMethod.GET)    public ModelAndView showFormDeleteClass(@PathVariable Long id){        ClassJoin classJoin = classJoinService.findById(id);        if (classJoin != null){            ModelAndView modelAndView = new ModelAndView("ClassJoin/delete");            modelAndView.addObject("classInfo",classJoin);            return modelAndView;        }else {            Iterable<ClassJoin> classList = classJoinService.findAll();            ModelAndView modelAndView =new ModelAndView("/ClassJoin/list");            modelAndView.addObject("classList",classList);            modelAndView.addObject("classInfo",new ClassJoin());            modelAndView.addObject("message", "Can not find class with id: " + id);            return modelAndView;        }    }    @RequestMapping(value = "/deleteCla", method = RequestMethod.POST)    public String  deleteClass(@ModelAttribute("classInfo") ClassJoin classJoin){        classJoinService.remove(classJoin.getId());        return "redirect:class";    }}